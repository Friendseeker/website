msgid ""
msgstr ""
"Project-Id-Version: The Book of sbt\n"
"POT-Creation-Date: 2024-10-30T03:50:36-04:00\n"
"PO-Revision-Date: 2024-10-30T03:50:36-04:00\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-cn\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: src/reference/guide/build-definition-basics.md:1
msgid "Build definition basics"
msgstr ""

#: src/reference/guide/build-definition-basics.md:4
msgid "This page discusses the `build.sbt` build definition."
msgstr ""

#: src/reference/guide/build-definition-basics.md:6
msgid "What is a build definition?"
msgstr ""

#: src/reference/guide/build-definition-basics.md:8
msgid ""
"A _build definition_ is defined in `build.sbt`, and it consists of a set of "
"projects (of type [`Project`](../api/sbt/Project.html)). Because the term "
"_project_ can be ambiguous, we often call it a _subproject_ in this guide."
msgstr ""

#: src/reference/guide/build-definition-basics.md:13
msgid ""
"For instance, in `build.sbt` you define the subproject located in the "
"current directory like this:"
msgstr ""

#: src/reference/guide/build-definition-basics.md:17
#: src/reference/guide/build-definition-basics.md:26
#: src/reference/guide/build-definition-basics.md:88
msgid "\"3.3.3\""
msgstr ""

#: src/reference/guide/build-definition-basics.md:18
#: src/reference/guide/build-definition-basics.md:27
msgid "\"Hello\""
msgstr ""

#: src/reference/guide/build-definition-basics.md:21
msgid "or more explicitly:"
msgstr ""

#: src/reference/guide/build-definition-basics.md:24
msgid "\".\""
msgstr ""

#: src/reference/guide/build-definition-basics.md:31
msgid ""
"Each subproject is configured by key-value pairs. For example, one key is "
"`name` and it maps to a string value, the name of your subproject. The key-"
"value pairs are listed under the `.settings(...)` method."
msgstr ""

#: src/reference/guide/build-definition-basics.md:36
msgid "build.sbt DSL"
msgstr ""

#: src/reference/guide/build-definition-basics.md:39
msgid ""
"`build.sbt` defines subprojects using a DSL called build.sbt DSL, which is "
"based on Scala. Initially you can use build.sbt DSL, like a YAML file, "
"declaring just `scalaVersion` and `libraryDependencies`, but it can supports "
"more features to keep the build definition organized as the build grows "
"larger."
msgstr ""

#: src/reference/guide/build-definition-basics.md:43
msgid "Typed setting expression"
msgstr ""

#: src/reference/guide/build-definition-basics.md:45
msgid "Let's take a closer look at the `build.sbt` DSL:"
msgstr ""

#: src/reference/guide/build-definition-basics.md:48
msgid "\"com.example\""
msgstr ""

#: src/reference/guide/build-definition-basics.md:53
msgid ""
"Each entry is called a _setting expression_. Some among them are also called "
"task expressions. We will see more on the difference later in this page."
msgstr ""

#: src/reference/guide/build-definition-basics.md:57
msgid "A setting expression consists of three parts:"
msgstr ""

#: src/reference/guide/build-definition-basics.md:59
msgid "Left-hand side is a _key_."
msgstr ""

#: src/reference/guide/build-definition-basics.md:60
msgid "_Operator_, which in this case is `:=`"
msgstr ""

#: src/reference/guide/build-definition-basics.md:61
msgid "Right-hand side is called the _body_, or the _setting/task body_."
msgstr ""

#: src/reference/guide/build-definition-basics.md:63
msgid ""
"On the left-hand side, `name`, `version`, and `scalaVersion` are _keys_. A "
"key is an instance of [`SettingKey[A]`](../../api/sbt/SettingKey.html), "
"[`TaskKey[A]`](../../api/sbt/TaskKey.html), or [`InputKey[A]`](../../api/sbt/"
"InputKey.html) where `A` is the expected value type."
msgstr ""

#: src/reference/guide/build-definition-basics.md:70
msgid ""
"Because key `name` is typed to `SettingKey[String]`, the `:=` operator on "
"`name` is also typed specifically to `String`. If you use the wrong value "
"type, the build definition will not compile:"
msgstr ""

#: src/reference/guide/build-definition-basics.md:75
msgid "// will not compile"
msgstr ""

#: src/reference/guide/build-definition-basics.md:78
msgid "`val`s and `lazy val`s"
msgstr ""

#: src/reference/guide/build-definition-basics.md:80
msgid ""
"To avoid repeating the same information, like the version number for a "
"library, `build.sbt` may be interspersed with `val`s, `lazy val`s, and "
"`def`s."
msgstr ""

#: src/reference/guide/build-definition-basics.md:84
#: src/reference/guide/build-definition-basics.md:102
#: src/reference/guide/build-definition-basics.md:111
msgid "\"0.2.0\""
msgstr ""

#: src/reference/guide/build-definition-basics.md:85
#: src/reference/guide/build-definition-basics.md:86
#: src/reference/guide/build-definition-basics.md:100
#: src/reference/guide/build-definition-basics.md:101
#: src/reference/guide/build-definition-basics.md:109
#: src/reference/guide/build-definition-basics.md:110
msgid "\"org.scala-lang\""
msgstr ""

#: src/reference/guide/build-definition-basics.md:85
#: src/reference/guide/build-definition-basics.md:100
#: src/reference/guide/build-definition-basics.md:109
msgid "\"toolkit\""
msgstr ""

#: src/reference/guide/build-definition-basics.md:86
#: src/reference/guide/build-definition-basics.md:101
#: src/reference/guide/build-definition-basics.md:110
msgid "\"toolkit-test\""
msgstr ""

#: src/reference/guide/build-definition-basics.md:93
msgid ""
"In the above, `val` defines a variable, which are initialized from the top "
"to bottom. This means that `toolkitV` must be defined before it is "
"referenced."
msgstr ""

#: src/reference/guide/build-definition-basics.md:96
msgid "Here's a bad example:"
msgstr ""

#: src/reference/guide/build-definition-basics.md:99
msgid "// bad example"
msgstr ""

#: src/reference/guide/build-definition-basics.md:100
#: src/reference/guide/build-definition-basics.md:101
msgid "// uninitialized reference!"
msgstr ""

#: src/reference/guide/build-definition-basics.md:105
msgid ""
"sbt will fail to load with `java.lang.ExceptionInInitializerError` cased by "
"a `NullPointerException` if your build.sbt contains an uninitialized forward "
"reference. One way to let the compiler fix this is to define the variables "
"as `lazy`:"
msgstr ""

#: src/reference/guide/build-definition-basics.md:114
msgid ""
"Some frown upon gratuitous `lazy val`s, but Scala 3 lazy vals are efficient, "
"and we think it makes the build definition more robust for copy-pasting."
msgstr ""
