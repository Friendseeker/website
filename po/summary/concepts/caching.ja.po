msgid ""
msgstr ""
"Project-Id-Version: The Book of sbt\n"
"POT-Creation-Date: 2024-10-30T03:08:34-04:00\n"
"PO-Revision-Date: 2024-10-30T01:14:09-04:00\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: src/reference/concepts/caching.md:1
msgid "Caching"
msgstr ""

#: src/reference/concepts/caching.md:4
msgid ""
"sbt 2.0 introduces hybrid local/remote cache system, which can cache the "
"task results to local disk and Bazel-compatible remote cache. Throughout sbt "
"releases it has implemented various caches, like `update` cache, incremental "
"compilation, but sbt 2.x's cache is a significant step change for a few "
"reasons:"
msgstr ""

#: src/reference/concepts/caching.md:6
msgid ""
"**Automatic**. sbt 2.x cache automates the caching by embedding itself into "
"the task macro unlike sbt 1.x wherein the plugin author called the cache "
"functions manually in the task implementation."
msgstr ""

#: src/reference/concepts/caching.md:7
msgid ""
"**Machine-wide**. sbt 2.x disk cache is shared among all builds on a machine."
msgstr ""

#: src/reference/concepts/caching.md:8
msgid ""
"**Remote-ready**. In sbt 2.x, the cache storage is configured separately "
"such that all cacheable tasks are automatically remote-cache-ready."
msgstr ""

#: src/reference/concepts/caching.md:10
msgid "Basics of caching"
msgstr ""

#: src/reference/concepts/caching.md:13
msgid ""
"The basic idea is treat as if the build process is a pure function that "
"takes input `(A1, A2, A3, ...)` and return some outputs `(R1, List(O1, O2, "
"O3, ...))`. For example, we can take a list of source files, Scala version, "
"and produce a `*.jar` file at the end. If the assumption holds, then for the "
"same inputs, we can memorize the ouput JAR for everyone. We are interested "
"in this technique because using the memorized output JAR would be faster "
"than performing the actual task like Scala compilation etc."
msgstr ""

#: src/reference/concepts/caching.md:15
msgid "Hermetic build"
msgstr ""

#: src/reference/concepts/caching.md:17
msgid ""
"As a mental model of the _build as a pure function_, build engineers "
"sometimes use the term _hermetic build_, which is a build that takes place "
"in a shipping container in a dessert with no clocks or the Internet. If we "
"can produce a JAR file from that state, then the JAR file should be safe to "
"be shared by any machine. Why did I mention the clock? It's because a JAR "
"file could capture the timestamp, and thus produce slightly different JARs "
"each time. To avoid this, hermetic build tools overwrite the timestamp to a "
"fixed date 2010-01-01 regardless of when the build took place."
msgstr ""

#: src/reference/concepts/caching.md:19
msgid ""
"A build that ends up capturing ephemeral inputs, are said to _break the "
"hermeticity_ or _non-hermetic_. Another common way the hermeticity is broken "
"is capturing absolute paths as either input or output. Sometimes the path "
"gets embedded into the JAR via a macro, you might not know until you inspect "
"the bytecode."
msgstr ""

#: src/reference/concepts/caching.md:21
msgid "Automatic caching"
msgstr ""

#: src/reference/concepts/caching.md:24
msgid "Here's a demonstration of the automatic caching:"
msgstr ""

#: src/reference/concepts/caching.md:29
msgid "\"something\""
msgstr ""

#: src/reference/concepts/caching.md:32
msgid "\"!\""
msgstr ""

#: src/reference/concepts/caching.md:36
msgid ""
"The task will be automatically cached based on the two settings `name` and "
"`version`. The first time we run the task it will be executed onsite, but "
"the second time onward, it will use the disk cache:"
msgstr ""

#: src/reference/concepts/caching.md:47
msgid "Caching is serialization-hard"
msgstr ""

#: src/reference/concepts/caching.md:49
msgid ""
"To participate in the automatic caching, the input keys (e.g. `name` and "
"`version`) must provide a given for `sjsonnew.HashWriter` typeclass and "
"return type must provide a given for `sjsonnew.JsonFormat`. [Contraband]"
"(https://www.scala-sbt.org/contraband/) can be used to generate sjson-new "
"codecs."
msgstr ""

#: src/reference/concepts/caching.md:51
msgid "Caching files"
msgstr ""

#: src/reference/concepts/caching.md:54
msgid ""
"Caching files (e.g. `java.io.File`) requires its own consideration, not "
"because it's technically difficult, but mostly because of the ambiguity and "
"assumptions when files are involved. When we say a \"file\" it could "
"actually mean:"
msgstr ""

#: src/reference/concepts/caching.md:56
msgid "Relative path from a well-known location"
msgstr ""

#: src/reference/concepts/caching.md:57
msgid "Materialized actual file"
msgstr ""

#: src/reference/concepts/caching.md:58
msgid "A unique proof of a file, or a content hash"
msgstr ""

#: src/reference/concepts/caching.md:60
msgid ""
"Technically speaking, a `File` just means the file path, so we can "
"deserialize just the filename such as `target/a/b.jar`. This will fail the "
"downstream tasks if they assumed that `target/a/b.jar` would exist in the "
"file system. For clarity, and also for avoiding to capture absolute paths, "
"sbt 2.x provides three separate types for the three cases."
msgstr ""

#: src/reference/concepts/caching.md:62
msgid ""
"`xsbti.VirtualFileRef` is used to mean just the relative path, which is "
"equivalent to passing a string"
msgstr ""

#: src/reference/concepts/caching.md:63
msgid ""
"`xsbti.VirtualFile` represents a materialized file with contents, which "
"could be a virtual file or a file in your disk"
msgstr ""

#: src/reference/concepts/caching.md:65
msgid ""
"However, for the purpose of hermetic build, neither is great to represent a "
"list of files. Having just the filename alone doesn't guarantee that the "
"file will be the same, and carrying the entire content of the files is too "
"inefficient in a JSON etc."
msgstr ""

#: src/reference/concepts/caching.md:67
msgid ""
"This is where the mysterious third option, a unique proof of file comes in "
"handy. In addition to the relative path, `HashedVirtualFileRef` tracks the "
"SHA-256 content hash and the file size. This can easily be serialized to "
"JSON yet we can reference the exact file."
msgstr ""

#: src/reference/concepts/caching.md:69
msgid "The effect of file creation"
msgstr ""

#: src/reference/concepts/caching.md:71
msgid ""
"There are many tasks that generate file that do not use `VirtualFile` as the "
"return type. For example, `compile` returns `Analysis` instead, and `*."
"class` file generation happens as a _side effect_ in sbt 1.x."
msgstr ""

#: src/reference/concepts/caching.md:73
msgid ""
"To participate in caching, we need to declare these effects as something we "
"care about."
msgstr ""

#: src/reference/concepts/caching.md:85
msgid "Remote caching"
msgstr ""

#: src/reference/concepts/caching.md:88
msgid ""
"You can optionally extend the build to use remote cache in addition to the "
"local disk cache. Remote caching could improve build performance by allowing "
"multiple machines to share build artifacts and outputs."
msgstr ""

#: src/reference/concepts/caching.md:90
msgid ""
"Imagine you have a dozen people in your project or a company. Each morning, "
"you will `git pull` the changes the dozen people made, and you need to build "
"their code. If you have a successful project, the code size will only get "
"bigger over time, and the % of the time you spend building someone else's in "
"your day increases. This becomes the limiting factor of your team size and "
"code size. Remote caching reverses this tide by CI systems hydrate the cache "
"and you can download the artifacts and task outputs."
msgstr ""

#: src/reference/concepts/caching.md:92
msgid ""
"sbt 2.x implements Bazel-compatible gRPC interface, which works with number "
"of backend both open source and commercial."
msgstr ""
